1. Explain each of the following terms in your own words
A. Translator: Translates a full program to a new program
B. Interpreter: converts an instruction (section of a program) into another 
C. Virtual Machine: A hypothetical machine that doesn't physically exist but built on an actual machine that exists and is able to execute similarly

2. What is the difference b/n interpretation and translation?
Translator: The instruction/program written in some level is translated/converted to a new instruction/program compatible with desired level. The new program is the one used. 
Interpreter: Sections of one program - instructions are coverted to new instructions at desired level but a new program doesn't need to be generated. Instructions are executed step by step.

3. Is it conceivable for a compiler to generate output for level 1 instead of level 2? Discuss the pros and cons of this proposal
-It is possible to generate output for level 1 instead of level 2. 
-Advantage: no need for L1 machine
-Disadvantage: too expensive to construct out of electronic circuits

4. Can you imagine any multilevel computer in which the device level and digital logic levels were not lowest levels? Explain
-Hardware and circuits must be the lowest level with transistors and gates. Unless another computer is being simulated on an already existing computer - the device level of the non-physical computer could be simulated at higher levels of the existing computer. 

5. Consider a computer with identical interpreters at levels 1, 2, and 3. It takes an interpreter n  instructions to fetch, examine, and execute one instruction. A level 1 instruction takes k nanoseconds to execute. How long does it take for an instruction at levels 2, 3, and 4?
  
  Level 4 - (k) * (n^3)
  
  Level 3 - (k) * (n^2)
  
  Level 2 - (k) * (n) instructions
  
  Level 1 - (k) ns to execute 
  
  6. Consider a multilevel computer in which all levels are different. Each level has instructions that are m times as powerful as those of the level below it; that is, one level r instruction can do the work of m level r - 1. If a level 1 program requires k seconds to run, how long would equivalent programs take at levels 2, 3, and 4 assuming n level r instructions are required to interpret a single r + 1 instruction?
  
  Level 4 - (k) * (n^3) / (m^3)
  
  Level 3 - (k) * (n^2) / (m^2)
  
  Level 2 - (k) * (n) / (m)
  
  Level 1 - (k) time to execute
  
  7. Some instructions at the operating system machine level are indentical to conventional machine language instructions. These instructions are carried out directly by the microprogram rather than the operating system. In light of your answer to the preceding problem, why do you think this is the case?
  -Interpretation at each level from higher levels to lower levels adds up exponentially. So if interpretion could be avoided it would save a lot more time
  
  8. In what sense are hardware and software equivalent? Not equivalent?
  -Equivalent: such that the hardware level can be simulated in software and the software level can be organized at the hardware level
  -Not equivalent: Hardware is physical material(circuits, cables, power supplies etc) and Software is not physical(algorithms and programs)
  
  9. One of the consequences of von Neumann's idea to store the program in memory is that programs can be modified, just like data. Can you think of an example where this facility might have been useful? (Hint: Think about doing arithmetic on arrays)
  -A program that does arithmetic using array values stores the values in memory and may iterate to use the stored value in memory to be used somewhere else in the program
  
  10. The performance ratio of the 360 model 75 is 50x that of 360 model 30, yet the cycle time is only 5x as fast. How do you account for this discrepancy?
  -
  
